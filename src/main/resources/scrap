/**
 * OnyxPos method.
 */
public boolean isSubjectToTake(final OnyxBoard board, final OnyxPosCollection c, 
        final GraphicsConst.COLOR color) {

    if (this.isDiamondCenter()) return false;
    boolean r = false;
    final GraphicsConst.COLOR oC = GraphicsConst.COLOR.getOposite(color.boolColor);
    String[] keys = null;
    int k = -1, l = 0, j = 0, m = -1; 

    for (OnyxDiamond d : board.getDiamondCollection().getDiamondsByPosKey(this.getKey())) {

        keys = d.getCornerKeys();
        for (int i = 0; i < keys.length; ++i) {
            if (c.getPosition(keys[i]).isOccupied() && 
                    c.getPosition(keys[i]).getPiece().color.bitColor == color.bitColor &&
                    !this.getKey().equals(c.getPosition(keys[i]).getKey())) {
                k = i;
                ++l;
            } 
            if (c.getPosition(keys[i]).isOccupied(oC.bitColor)&& 
                    c.getPosition(keys[i]).getPiece().color.bitColor == oC.bitColor) {
                ++j;
            }
            if (this.getKey().equals(c.getPosition(keys[i]).getKey())) m = i;
        }

        if (l == 1 && j == 1 && k > -1 && m > -1) {
            if ((k == 0 && m == 2) || (k == 1 && m == 3) || (k == 2 && m == 0) ||
                    (k == 3 && m == 1)) {
                r = true;
            }
        }

        k = -1; l = 0; j = 0; m = -1;
    }

    return r;
}

////////////////////////////////////////////////////////////////////////////////
// POS MAP bu //////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

    public static final HashMap<String, String> POS_MAP = new HashMap<>();
    static {
        
        OnyxConst.POS_MAP.put("1,0-1,0", "A-12");
        OnyxConst.POS_MAP.put("2,0-1,0", "B-12");
        OnyxConst.POS_MAP.put("3,0-1,0", "C-12");
        OnyxConst.POS_MAP.put("4,0-1,0", "D-12");
        OnyxConst.POS_MAP.put("5,0-1,0", "E-12");
        OnyxConst.POS_MAP.put("6,0-1,0", "F-12");
        OnyxConst.POS_MAP.put("7,0-1,0", "G-12");
        OnyxConst.POS_MAP.put("8,0-1,0", "H-12");
        OnyxConst.POS_MAP.put("9,0-1,0", "I-12");
        OnyxConst.POS_MAP.put("10,0-1,0", "J-12");
        OnyxConst.POS_MAP.put("11,0-1,0", "K-12");
        OnyxConst.POS_MAP.put("12,0-1,0", "L-12");
        OnyxConst.POS_MAP.put("13,0-1,0", "M-12");
        OnyxConst.POS_MAP.put("14,0-1,0", "N-12");
        OnyxConst.POS_MAP.put("15,0-1,0", "O-12");
        OnyxConst.POS_MAP.put("16,0-1,0", "P-12");

        OnyxConst.POS_MAP.put("1,0-2,0", "A-11");
        OnyxConst.POS_MAP.put("2,0-2,0", "B-11");
        OnyxConst.POS_MAP.put("3,0-2,0", "C-11");
        OnyxConst.POS_MAP.put("4,0-2,0", "D-11");
        OnyxConst.POS_MAP.put("5,0-2,0", "E-11");
        OnyxConst.POS_MAP.put("6,0-2,0", "F-11");
        OnyxConst.POS_MAP.put("7,0-2,0", "G-11");
        OnyxConst.POS_MAP.put("8,0-2,0", "H-11");
        OnyxConst.POS_MAP.put("9,0-2,0", "I-11");
        OnyxConst.POS_MAP.put("10,0-2,0", "J-11");
        OnyxConst.POS_MAP.put("11,0-2,0", "K-11");
        OnyxConst.POS_MAP.put("12,0-2,0", "L-11");
        OnyxConst.POS_MAP.put("13,0-2,0", "M-11");
        OnyxConst.POS_MAP.put("14,0-2,0", "N-11");
        OnyxConst.POS_MAP.put("15,0-2,0", "O-11");
        OnyxConst.POS_MAP.put("16,0-2,0", "P-11");

        OnyxConst.POS_MAP.put("1,0-3,0", "A-10");
        OnyxConst.POS_MAP.put("2,0-3,0", "B-10");
        OnyxConst.POS_MAP.put("3,0-3,0", "C-10");
        OnyxConst.POS_MAP.put("4,0-3,0", "D-10");
        OnyxConst.POS_MAP.put("5,0-3,0", "E-10");
        OnyxConst.POS_MAP.put("6,0-3,0", "F-10");
        OnyxConst.POS_MAP.put("7,0-3,0", "G-10");
        OnyxConst.POS_MAP.put("8,0-3,0", "H-10");
        OnyxConst.POS_MAP.put("9,0-3,0", "I-10");
        OnyxConst.POS_MAP.put("10,0-3,0", "J-10");
        OnyxConst.POS_MAP.put("11,0-3,0", "K-10");
        OnyxConst.POS_MAP.put("12,0-3,0", "L-10");
        OnyxConst.POS_MAP.put("13,0-3,0", "M-10");
        OnyxConst.POS_MAP.put("14,0-3,0", "N-10");
        OnyxConst.POS_MAP.put("15,0-3,0", "O-10");
        OnyxConst.POS_MAP.put("16,0-3,0", "P-10");

        OnyxConst.POS_MAP.put("1,0-4,0", "A-9");
        OnyxConst.POS_MAP.put("2,0-4,0", "B-9");
        OnyxConst.POS_MAP.put("3,0-4,0", "C-9");
        OnyxConst.POS_MAP.put("4,0-4,0", "D-9");
        OnyxConst.POS_MAP.put("5,0-4,0", "E-9");
        OnyxConst.POS_MAP.put("6,0-4,0", "F-9");
        OnyxConst.POS_MAP.put("7,0-4,0", "G-9");
        OnyxConst.POS_MAP.put("8,0-4,0", "H-9");
        OnyxConst.POS_MAP.put("9,0-4,0", "I-9");
        OnyxConst.POS_MAP.put("10,0-4,0", "J-9");
        OnyxConst.POS_MAP.put("11,0-4,0", "K-9");
        OnyxConst.POS_MAP.put("12,0-4,0", "L-9");
        OnyxConst.POS_MAP.put("13,0-4,0", "M-9");
        OnyxConst.POS_MAP.put("14,0-4,0", "N-9");
        OnyxConst.POS_MAP.put("15,0-4,0", "O-9");
        OnyxConst.POS_MAP.put("16,0-4,0", "P-9");

        OnyxConst.POS_MAP.put("1,0-5,0", "A-8");
        OnyxConst.POS_MAP.put("2,0-5,0", "B-8");
        OnyxConst.POS_MAP.put("3,0-5,0", "C-8");
        OnyxConst.POS_MAP.put("4,0-5,0", "D-8");
        OnyxConst.POS_MAP.put("5,0-5,0", "E-8");
        OnyxConst.POS_MAP.put("6,0-5,0", "F-8");
        OnyxConst.POS_MAP.put("7,0-5,0", "G-8");
        OnyxConst.POS_MAP.put("8,0-5,0", "H-8");
        OnyxConst.POS_MAP.put("9,0-5,0", "I-8");
        OnyxConst.POS_MAP.put("10,0-5,0", "J-8");
        OnyxConst.POS_MAP.put("11,0-5,0", "K-8");
        OnyxConst.POS_MAP.put("12,0-5,0", "L-8");
        OnyxConst.POS_MAP.put("13,0-5,0", "M-8");
        OnyxConst.POS_MAP.put("14,0-5,0", "N-8");
        OnyxConst.POS_MAP.put("15,0-5,0", "O-8");
        OnyxConst.POS_MAP.put("16,0-5,0", "P-8");

        OnyxConst.POS_MAP.put("1,0-6,0", "A-7");
        OnyxConst.POS_MAP.put("2,0-6,0", "B-7");
        OnyxConst.POS_MAP.put("3,0-6,0", "C-7");
        OnyxConst.POS_MAP.put("4,0-6,0", "D-7");
        OnyxConst.POS_MAP.put("5,0-6,0", "E-7");
        OnyxConst.POS_MAP.put("6,0-6,0", "F-7");
        OnyxConst.POS_MAP.put("7,0-6,0", "G-7");
        OnyxConst.POS_MAP.put("8,0-6,0", "H-7");
        OnyxConst.POS_MAP.put("9,0-6,0", "I-7");
        OnyxConst.POS_MAP.put("10,0-6,0", "J-7");
        OnyxConst.POS_MAP.put("11,0-6,0", "K-7");
        OnyxConst.POS_MAP.put("12,0-6,0", "L-7");
        OnyxConst.POS_MAP.put("13,0-6,0", "M-7");
        OnyxConst.POS_MAP.put("14,0-6,0", "N-7");
        OnyxConst.POS_MAP.put("15,0-6,0", "O-7");
        OnyxConst.POS_MAP.put("16,0-6,0", "P-7");

        OnyxConst.POS_MAP.put("1,0-7,0", "A-6");
        OnyxConst.POS_MAP.put("2,0-7,0", "B-6");
        OnyxConst.POS_MAP.put("3,0-7,0", "C-6");
        OnyxConst.POS_MAP.put("4,0-7,0", "D-6");
        OnyxConst.POS_MAP.put("5,0-7,0", "E-6");
        OnyxConst.POS_MAP.put("6,0-7,0", "F-6");
        OnyxConst.POS_MAP.put("7,0-7,0", "G-6");
        OnyxConst.POS_MAP.put("8,0-7,0", "H-6");
        OnyxConst.POS_MAP.put("9,0-7,0", "I-6");
        OnyxConst.POS_MAP.put("10,0-7,0", "J-6");
        OnyxConst.POS_MAP.put("11,0-7,0", "K-6");
        OnyxConst.POS_MAP.put("12,0-7,0", "L-6");
        OnyxConst.POS_MAP.put("13,0-7,0", "M-6");
        OnyxConst.POS_MAP.put("14,0-7,0", "N-6");
        OnyxConst.POS_MAP.put("15,0-7,0", "O-6");
        OnyxConst.POS_MAP.put("16,0-7,0", "P-6");

        OnyxConst.POS_MAP.put("1,0-8,0", "A-5");
        OnyxConst.POS_MAP.put("2,0-8,0", "B-5");
        OnyxConst.POS_MAP.put("3,0-8,0", "C-5");
        OnyxConst.POS_MAP.put("4,0-8,0", "D-5");
        OnyxConst.POS_MAP.put("5,0-8,0", "E-5");
        OnyxConst.POS_MAP.put("6,0-8,0", "F-5");
        OnyxConst.POS_MAP.put("7,0-8,0", "G-5");
        OnyxConst.POS_MAP.put("8,0-8,0", "H-5");
        OnyxConst.POS_MAP.put("9,0-8,0", "I-5");
        OnyxConst.POS_MAP.put("10,0-8,0", "J-5");
        OnyxConst.POS_MAP.put("11,0-8,0", "K-5");
        OnyxConst.POS_MAP.put("12,0-8,0", "L-5");
        OnyxConst.POS_MAP.put("13,0-8,0", "M-5");
        OnyxConst.POS_MAP.put("14,0-8,0", "N-5");
        OnyxConst.POS_MAP.put("15,0-8,0", "O-5");
        OnyxConst.POS_MAP.put("16,0-8,0", "P-5");

        OnyxConst.POS_MAP.put("1,0-9,0", "A-4");
        OnyxConst.POS_MAP.put("2,0-9,0", "B-4");
        OnyxConst.POS_MAP.put("3,0-9,0", "C-4");
        OnyxConst.POS_MAP.put("4,0-9,0", "D-4");
        OnyxConst.POS_MAP.put("5,0-9,0", "E-4");
        OnyxConst.POS_MAP.put("6,0-9,0", "F-4");
        OnyxConst.POS_MAP.put("7,0-9,0", "G-4");
        OnyxConst.POS_MAP.put("8,0-9,0", "H-4");
        OnyxConst.POS_MAP.put("9,0-9,0", "I-4");
        OnyxConst.POS_MAP.put("10,0-9,0", "J-4");
        OnyxConst.POS_MAP.put("11,0-9,0", "K-4");
        OnyxConst.POS_MAP.put("12,0-9,0", "L-4");
        OnyxConst.POS_MAP.put("13,0-9,0", "M-4");
        OnyxConst.POS_MAP.put("14,0-9,0", "N-4");
        OnyxConst.POS_MAP.put("15,0-9,0", "O-4");
        OnyxConst.POS_MAP.put("16,0-9,0", "P-4");

        OnyxConst.POS_MAP.put("1,0-10,0", "A-3");
        OnyxConst.POS_MAP.put("2,0-10,0", "B-3");
        OnyxConst.POS_MAP.put("3,0-10,0", "C-3");
        OnyxConst.POS_MAP.put("4,0-10,0", "D-3");
        OnyxConst.POS_MAP.put("5,0-10,0", "E-3");
        OnyxConst.POS_MAP.put("6,0-10,0", "F-3");
        OnyxConst.POS_MAP.put("7,0-10,0", "G-3");
        OnyxConst.POS_MAP.put("8,0-10,0", "H-3");
        OnyxConst.POS_MAP.put("9,0-10,0", "I-3");
        OnyxConst.POS_MAP.put("10,0-10,0", "J-3");
        OnyxConst.POS_MAP.put("11,0-10,0", "K-3");
        OnyxConst.POS_MAP.put("12,0-10,0", "L-3");
        OnyxConst.POS_MAP.put("13,0-10,0", "M-3");
        OnyxConst.POS_MAP.put("14,0-10,0", "N-3");
        OnyxConst.POS_MAP.put("15,0-10,0", "O-3");
        OnyxConst.POS_MAP.put("16,0-10,0", "P-3");

        OnyxConst.POS_MAP.put("1,0-11,0", "A-2");
        OnyxConst.POS_MAP.put("2,0-11,0", "B-2");
        OnyxConst.POS_MAP.put("3,0-11,0", "C-2");
        OnyxConst.POS_MAP.put("4,0-11,0", "D-2");
        OnyxConst.POS_MAP.put("5,0-11,0", "E-2");
        OnyxConst.POS_MAP.put("6,0-11,0", "F-2");
        OnyxConst.POS_MAP.put("7,0-11,0", "G-2");
        OnyxConst.POS_MAP.put("8,0-11,0", "H-2");
        OnyxConst.POS_MAP.put("9,0-11,0", "I-2");
        OnyxConst.POS_MAP.put("10,0-11,0", "J-2");
        OnyxConst.POS_MAP.put("11,0-11,0", "K-2");
        OnyxConst.POS_MAP.put("12,0-11,0", "L-2");
        OnyxConst.POS_MAP.put("13,0-11,0", "M-2");
        OnyxConst.POS_MAP.put("14,0-11,0", "N-2");
        OnyxConst.POS_MAP.put("15,0-11,0", "O-2");
        OnyxConst.POS_MAP.put("16,0-11,0", "P-2");

        OnyxConst.POS_MAP.put("1,0-12,0", "A-1");
        OnyxConst.POS_MAP.put("2,0-12,0", "B-1");
        OnyxConst.POS_MAP.put("3,0-12,0", "C-1");
        OnyxConst.POS_MAP.put("4,0-12,0", "D-1");
        OnyxConst.POS_MAP.put("5,0-12,0", "E-1");
        OnyxConst.POS_MAP.put("6,0-12,0", "F-1");
        OnyxConst.POS_MAP.put("7,0-12,0", "G-1");
        OnyxConst.POS_MAP.put("8,0-12,0", "H-1");
        OnyxConst.POS_MAP.put("9,0-12,0", "I-1");
        OnyxConst.POS_MAP.put("10,0-12,0", "J-1");
        OnyxConst.POS_MAP.put("11,0-12,0", "K-1");
        OnyxConst.POS_MAP.put("12,0-12,0", "L-1");
        OnyxConst.POS_MAP.put("13,0-12,0", "M-1");
        OnyxConst.POS_MAP.put("14,0-12,0", "N-1");
        OnyxConst.POS_MAP.put("15,0-12,0", "O-1");
        OnyxConst.POS_MAP.put("16,0-12,0", "P-1");
        

        OnyxConst.POS_MAP.put("2,5-11,5", "B-C-1-2");
        OnyxConst.POS_MAP.put("4,5-11,5", "D-E-1-2");
        OnyxConst.POS_MAP.put("6,5-11,5", "F-G-1-2");
        OnyxConst.POS_MAP.put("8,5-11,5", "H-I-1-2");
        OnyxConst.POS_MAP.put("10,5-11,5", "J-K-1-2"); 
        OnyxConst.POS_MAP.put("12,5-11,5", "M-N-1-2");
        OnyxConst.POS_MAP.put("14,5-11,5", "O-P-1-2");

        OnyxConst.POS_MAP.put("2,5-9,5", "B-C-3-4");
        OnyxConst.POS_MAP.put("4,5-9,5", "D-E-3-4");
        OnyxConst.POS_MAP.put("6,5-9,5", "F-G-3-4");
        OnyxConst.POS_MAP.put("8,5-9,5", "H-I-3-4");
        OnyxConst.POS_MAP.put("10,5-9,5", "J-K-3-4");
        OnyxConst.POS_MAP.put("12,5-9,5", "M-N-3-4");
        OnyxConst.POS_MAP.put("14,5-9,5", "O-P-3-4");

        OnyxConst.POS_MAP.put("2,5-7,5", "B-C-5-6");
        OnyxConst.POS_MAP.put("4,5-7,5", "D-E-5-6");
        OnyxConst.POS_MAP.put("6,5-7,5", "F-G-5-6");
        OnyxConst.POS_MAP.put("8,5-7,5", "H-I-5-6");
        OnyxConst.POS_MAP.put("10,5-7,5", "J-K-5-6");
        OnyxConst.POS_MAP.put("12,5-7,5", "M-N-5-6");
        OnyxConst.POS_MAP.put("14,5-7,5", "O-P-5-6");

        OnyxConst.POS_MAP.put("2,5-5,5", "B-C-7-8");
        OnyxConst.POS_MAP.put("4,5-5,5", "D-E-7-8");
        OnyxConst.POS_MAP.put("6,5-5,5", "F-G-7-8");
        OnyxConst.POS_MAP.put("8,5-5,5", "H-I-7-8");
        OnyxConst.POS_MAP.put("10,5-5,5", "J-K-7-8");
        OnyxConst.POS_MAP.put("12,5-5,5", "M-N-7-8");
        OnyxConst.POS_MAP.put("14,5-5,5", "O-P-7-8");

        OnyxConst.POS_MAP.put("2,5-3,5", "B-C-9-10");
        OnyxConst.POS_MAP.put("4,5-3,5", "D-E-9-10");
        OnyxConst.POS_MAP.put("6,5-3,5", "F-G-9-10");
        OnyxConst.POS_MAP.put("8,5-3,5", "H-I-9-10");
        OnyxConst.POS_MAP.put("10,5-3,5", "J-K-9-10");
        OnyxConst.POS_MAP.put("12,5-3,5", "M-N-9-10");
        OnyxConst.POS_MAP.put("14,5-3,5", "O-P-9-10");

        OnyxConst.POS_MAP.put("2,5-1,5", "B-C-11-12");
        OnyxConst.POS_MAP.put("4,5-1,5", "D-E-11-12");
        OnyxConst.POS_MAP.put("6,5-1,5", "F-G-11-12");
        OnyxConst.POS_MAP.put("8,5-1,5", "H-I-11-12");
        OnyxConst.POS_MAP.put("10,5-1,5", "J-K-11-12");
        OnyxConst.POS_MAP.put("12,5-1,5", "M-N-11-12");
        OnyxConst.POS_MAP.put("14,5-1,5", "O-P-11-12");

        OnyxConst.POS_MAP.put("1,5-10,5", "A-B-2-3");
        OnyxConst.POS_MAP.put("3,5-10,5", "C-D-2-3");
        OnyxConst.POS_MAP.put("5,5-10,5", "E-F-2-3");
        OnyxConst.POS_MAP.put("7,5-10,5", "G-H-2-3");
        OnyxConst.POS_MAP.put("9,5-10,5", "I-J-2-3");
        OnyxConst.POS_MAP.put("11,5-10,5", "K-L-2-3");
        OnyxConst.POS_MAP.put("13,5-10,5", "M-N-2-3");
        OnyxConst.POS_MAP.put("15,5-10,5", "O-P-2-3");

        OnyxConst.POS_MAP.put("1,5-8,5", "A-B-4-5");
        OnyxConst.POS_MAP.put("3,5-8,5", "C-D-4-5");
        OnyxConst.POS_MAP.put("5,5-8,5", "E-F-4-5");
        OnyxConst.POS_MAP.put("7,5-8,5", "G-H-4-5");
        OnyxConst.POS_MAP.put("9,5-8,5", "I-J-4-5");
        OnyxConst.POS_MAP.put("11,5-8,5", "K-L-4-5");
        OnyxConst.POS_MAP.put("13,5-8,5", "M-N-4-5");
        OnyxConst.POS_MAP.put("15,5-8,5", "O-P-4-5");

        OnyxConst.POS_MAP.put("1,5-6,5", "A-B-6-7");
        OnyxConst.POS_MAP.put("3,5-6,5", "C-D-6-7");
        OnyxConst.POS_MAP.put("5,5-6,5", "E-F-6-7");
        OnyxConst.POS_MAP.put("7,5-6,5", "G-H-6-7");
        OnyxConst.POS_MAP.put("9,5-6,5", "I-J-6-7");
        OnyxConst.POS_MAP.put("11,5-6,5", "K-L-6-7");
        OnyxConst.POS_MAP.put("13,5-6,5", "M-N-6-7");
        OnyxConst.POS_MAP.put("15,5-6,5", "O-P-6-7");

        OnyxConst.POS_MAP.put("1,5-4,5", "A-B-8-9");
        OnyxConst.POS_MAP.put("3,5-4,5", "C-D-8-9");
        OnyxConst.POS_MAP.put("5,5-4,5", "E-F-8-9");
        OnyxConst.POS_MAP.put("7,5-4,5", "G-H-8-9");
        OnyxConst.POS_MAP.put("9,5-4,5", "I-J-8-9");
        OnyxConst.POS_MAP.put("11,5-4,5", "K-L-8-9");
        OnyxConst.POS_MAP.put("13,5-4,5", "M-N-8-9");
        OnyxConst.POS_MAP.put("15,5-4,5", "O-P-8-9");

        OnyxConst.POS_MAP.put("1,5-2,5", "A-B-10-11");
        OnyxConst.POS_MAP.put("3,5-2,5", "C-D-10-11");
        OnyxConst.POS_MAP.put("5,5-2,5", "E-F-10-11");
        OnyxConst.POS_MAP.put("7,5-2,5", "G-H-10-11");
        OnyxConst.POS_MAP.put("9,5-2,5", "I-J-10-11");
        OnyxConst.POS_MAP.put("11,5-2,5", "K-L-10-11");
        OnyxConst.POS_MAP.put("13,5-2,5", "M-N-10-11");
        OnyxConst.POS_MAP.put("15,5-2,5", "O-P-10-11");
        
    }

////////////////////////////////////////////////////////////////////////////////
// Restart Board size change :
    final Object[] options = {"OK", "No", "Cancel"};
    final int n = JOptionPane.showOptionDialog(this,
        "Change Onyx baord size and start a new game ?\n" + 
        "Current game will be lost and a new game will be started using actual color.",
        "Change Onyx board dimensions ?",
        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null,
        options, options[0]);

    if (n == 0) {
        // Blah bla...
    }

////////////////////////////////////////////////////////////////////////////////

    @Deprecated
    private String[] sortCnxPositions2(final OnyxPos p) {
        
        final String[] cnxs = p.connections;
        final OnyxPos poss[] = new OnyxPos[7]; 
        final LinkedList<String> r = new LinkedList<>();
        int i = -1;
        OnyxPos tmp = null;
        
        /**
         * If the tail is linked (reached oposite border depending on low
         * border start TRUE/FALSE) then return all recusive calls.
         */
        if (this.linked) return r.toArray(new String[r.size()]);
        
        /**
         * Forward position - only one forward position must be found depending
         * on color and tail start side (start @ low border TRUE/FALSE) :
         * poss[0] = that position.
         */
        for (String cnx : cnxs) {
            
            tmp = c.getPosition(cnx);
            if (tmp == null) continue;
                        
            if (((this.startLowBorder && (this.color.bool && (tmp.y == p.y && tmp.x > p.x))) ||
                (this.startLowBorder && (!this.color.bool && (tmp.x == p.x && tmp.y > p.y)))) ||
                ((!this.startLowBorder && (this.color.bool && (tmp.y == p.y && tmp.x < p.x))) ||
                (!this.startLowBorder && (!this.color.bool && (tmp.x == p.x && tmp.y < p.y))))) {
                poss[++i] = tmp;
            }
        }
        
        if (poss[0] != null) r.addLast(poss[0].getKey());
        
        /**
         * Right & left moves - only two moves can found as this method is only
         * used for non-diamond-center position - after iteration, found 
         * positions 1 & 2 go to poss[1 OR 2] indexes depending on color.
         */
        for (String cnx : cnxs) {            
            tmp = c.getPosition(cnx);
            if (tmp == null) continue;            
            if ((this.color.bool && tmp.x == p.x) || (!this.color.bool && tmp.y == p.y)) poss[++i] = tmp;
        }              
        
        if (this.color.bool && poss[2] != null) r.addLast(poss[2].getKey());
        else if (poss[1] != null) r.addLast(poss[1].getKey());
        
        if (this.color.bool && poss[1] != null) r.addLast(poss[1].getKey());
        else if (poss[2] != null) r.addLast(poss[2].getKey());
                
        /**
         * Forward up & down moves - max of two moves are possible - if target
         * position is a diamond center with occupied neighbour positions then
         * discard - after iteration, found positions 1 & 2 go to poss[3 & 4] 
         * indexes depending on color.
         */
        for (String cnx : cnxs) {
            
            tmp = c.getPosition(cnx);
            if (tmp == null || (tmp.isDiamondCenter() && tmp.hasNeighbour(this.c, this.color))) continue;  
            
            if (((this.startLowBorder && (this.color.bool && (tmp.y != p.y && tmp.x > p.x))) ||
                (this.startLowBorder && (!this.color.bool && (tmp.x != p.x && tmp.y > p.y)))) ||
                ((!this.startLowBorder && (this.color.bool && (tmp.y != p.y && tmp.x < p.x))) ||
                (!this.startLowBorder && (!this.color.bool && (tmp.x != p.x && tmp.y < p.y))))) {
                poss[++i] = tmp;
            }
        }
        
        if (this.color.bool && poss[4] != null) r.addLast(poss[4].getKey());
        else if (poss[3] != null) r.addLast(poss[3].getKey());
        
        if (this.color.bool && poss[3] != null) r.addLast(poss[3].getKey());
        else if (poss[4] != null) r.addLast(poss[4].getKey());

        /**
         * Return/backwards up & down moves - max of two moves are possible - if target
         * position is a diamond center with occupied neighbour positions then
         * discard - after iteration, found positions 1 & 2 go to poss[5 & 6] 
         * indexes depending on color.
         */
        for (String cnx : cnxs) {
            
            tmp = c.getPosition(cnx);
            if (tmp == null || (tmp.isDiamondCenter() && tmp.hasNeighbour(this.c, this.color))) continue;  
            
            if (((this.startLowBorder && (this.color.bool && (tmp.y != p.y && tmp.x < p.x))) ||
                (this.startLowBorder && (!this.color.bool && (tmp.x != p.x && tmp.y < p.y)))) ||
                ((!this.startLowBorder && (this.color.bool && (tmp.y != p.y && tmp.x > p.x))) ||
                (!this.startLowBorder && (!this.color.bool && (tmp.x != p.x && tmp.y > p.y))))) {
                poss[++i] = tmp;
            }
        }
        
        if (this.color.bool && poss[6] != null) r.addLast(poss[6].getKey());
        else if (poss[5] != null) r.addLast(poss[5].getKey());
        
        if (this.color.bool && poss[3] != null) r.addLast(poss[3].getKey());
        else if (poss[4] != null) r.addLast(poss[4].getKey());

        /**
         * Finally return linked list to array.
         */
        return r.toArray(new String[r.size()]);
    }

    @Deprecated
    private String[] sortCnxPositions2(final OnyxPos p) {
        
        final String[] cnxs = p.connections;
        final OnyxPos poss[] = new OnyxPos[7]; 
        final LinkedList<String> r = new LinkedList<>();
        int i = -1;
        OnyxPos tmp = null;
        
        /**
         * If the tail is linked (reached oposite border depending on low
         * border start TRUE/FALSE) then return all recusive calls.
         */
        if (linked) return r.toArray(new String[r.size()]);
        
        /**
         * Forward position - only one forward position must be found depending
         * on color and tail start side (start @ low border TRUE/FALSE) :
         * poss[0] = that position.
         */
        for (String cnx : cnxs) {
            
            tmp = c.getPosition(cnx);
            if (tmp == null) continue;
                        
            if (((startLowBorder && (color.bool && (tmp.y == p.y && tmp.x > p.x))) ||
                (startLowBorder && (!color.bool && (tmp.x == p.x && tmp.y > p.y)))) ||
                ((!startLowBorder && (color.bool && (tmp.y == p.y && tmp.x < p.x))) ||
                (!startLowBorder && (!color.bool && (tmp.x == p.x && tmp.y < p.y))))) {
                poss[++i] = tmp;
            }
        }
        
        if (poss[0] != null) r.addLast(poss[0].getKey());
        
        /**
         * Right & left moves - only two moves can found as this method is only
         * used for non-diamond-center position - after iteration, found 
         * positions 1 & 2 go to poss[1 OR 2] indexes depending on color.
         */
        for (String cnx : cnxs) {            
            tmp = c.getPosition(cnx);
            if (tmp == null) continue;            
            if ((color.bool && tmp.x == p.x) || (!color.bool && tmp.y == p.y)) poss[++i] = tmp;
        }              
        
        if (color.bool && poss[2] != null) r.addLast(poss[2].getKey());
        else if (poss[1] != null) r.addLast(poss[1].getKey());
        
        if (color.bool && poss[1] != null) r.addLast(poss[1].getKey());
        else if (poss[2] != null) r.addLast(poss[2].getKey());
                
        /**
         * Forward up & down moves - max of two moves are possible - if target
         * position is a diamond center with occupied neighbour positions then
         * discard - after iteration, found positions 1 & 2 go to poss[3 & 4] 
         * indexes depending on color.
         */
        for (String cnx : cnxs) {
            
            tmp = c.getPosition(cnx);
            if (tmp == null || (tmp.isDiamondCenter() && tmp.hasNeighbour(c, color))) continue;  
            
            if (((startLowBorder && (color.bool && (tmp.y != p.y && tmp.x > p.x))) ||
                (startLowBorder && (!color.bool && (tmp.x != p.x && tmp.y > p.y)))) ||
                ((!startLowBorder && (color.bool && (tmp.y != p.y && tmp.x < p.x))) ||
                (!startLowBorder && (!color.bool && (tmp.x != p.x && tmp.y < p.y))))) {
                poss[++i] = tmp;
            }
        }
        
        if (color.bool && poss[4] != null) r.addLast(poss[4].getKey());
        else if (poss[3] != null) r.addLast(poss[3].getKey());
        
        if (color.bool && poss[3] != null) r.addLast(poss[3].getKey());
        else if (poss[4] != null) r.addLast(poss[4].getKey());

        /**
         * Return/backwards up & down moves - max of two moves are possible - if target
         * position is a diamond center with occupied neighbour positions then
         * discard - after iteration, found positions 1 & 2 go to poss[5 & 6] 
         * indexes depending on color.
         */
        for (String cnx : cnxs) {
            
            tmp = c.getPosition(cnx);
            if (tmp == null || (tmp.isDiamondCenter() && tmp.hasNeighbour(c, color))) continue;  
            
            if (((startLowBorder && (color.bool && (tmp.y != p.y && tmp.x < p.x))) ||
                (startLowBorder && (!color.bool && (tmp.x != p.x && tmp.y < p.y)))) ||
                ((!startLowBorder && (color.bool && (tmp.y != p.y && tmp.x > p.x))) ||
                (!startLowBorder && (!color.bool && (tmp.x != p.x && tmp.y > p.y))))) {
                poss[++i] = tmp;
            }
        }
        
        if (color.bool && poss[6] != null) r.addLast(poss[6].getKey());
        else if (poss[5] != null) r.addLast(poss[5].getKey());
        
        if (color.bool && poss[3] != null) r.addLast(poss[3].getKey());
        else if (poss[4] != null) r.addLast(poss[4].getKey());

        /**
         * Finally return linked list to array.
         */
        return r.toArray(new String[r.size()]);
    }

    ////////////////////////////////////////////////////////////////////////////
    /** FIXME : bebug purpose, print all tails. */
    if (tail != null) print(AbstractSubroutine.VTAIL_CANDIDATE_FORMAT, type, 
        HTMLDisplayHelper.GAINSBORO, color, tail.lenght(), tail.toString());
    /** FIXME : END DEBUG. */